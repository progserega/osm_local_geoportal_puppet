#!/bin/bash
# Managed by Puppet. Do not edit manualy.

email_success="abuse@rsprim.ru"
email_error_to="abuse@rsprim.ru"
email_server="mail-rsprim-ru.rs.int"

db_name="<%= @db_corp_name %>"
db_user="<%= @db_user %>"
db_host="<%= @db_host %>"


log="/var/log/osm/corp_osm2corp_gis_from_full_remote_dump.log"
wget_log="/var/log/osm/corp_osm2corp_gis_from_full_remote_dump-wget.log"
osm2pgsql_log="/var/log/osm/corp_osm2corp_gis_from_full_remote_dump-osm2pg.log"
pg_restore_log="/var/log/osm/corp_osm2corp_gis_from_full_remote_dump-pg_restore.log"
pg_create_db_log="/var/log/osm/corp_osm2corp_gis_from_full_remote_dump-pg_create.log"
state_file="/var/spool/osm/corp_gis_update/corp_osm2corp_gis_from_full_remote_dump.state"


dump=`mktemp /tmp/corp2gis_full_remote_dump_XXXXXX`
rm "${dump}"

postgres_run()
{
	db="${1}"
	sql="${2}"
	echo "execute: ${sql}"
	echo "echo ${sql}|psql -U${db_user} -h ${db_host} -w ${db} &> ${pg_create_db_log}"
	echo "${sql}"|psql -U${db_user} -h ${db_host} -w ${db} &> "${pg_create_db_log}"
	status="$?"
	if [ ! 0 -eq ${status} ]
	then
		echo "`date +%Y.%m.%d-%T`: ERROR ошибка выполнения sql-запроса: ${sql}" >> ${log}
		tail "${pg_create_db_log}"
		rm ${state_file}
		return 1
	else 
		echo "`date +%Y.%m.%d-%T`: загрузка ${sql}, status=$status" >> ${log}
		return 0
	fi
}

postgres_run_file()
{
	db="${1}"
	sql_file="${2}"
	echo "execute: ${sql}"
	echo "psql -U${db_user} -h ${db_host} -w ${db} < ${sql_file} &> ${pg_create_db_log}"
	psql -U${db_user} -h ${db_host} -w ${db} < "${sql_file}" &> "${pg_create_db_log}"
	status="$?"
	if [ ! 0 -eq ${status} ]
	then
		echo "`date +%Y.%m.%d-%T`: ERROR ошибка выполнения sql-запросов из файла: ${sql_file}" >> ${log}
		tail "${pg_create_db_log}"
		rm ${state_file}
		return 1
	else 
		echo "`date +%Y.%m.%d-%T`: загрузка файла ${sql_file}, status=$status" >> ${log}
		return 0
	fi
}
mkdir -p "/var/spool/osm/corp_gis_update" "/var/log/osm/"
echo "`date +%Y.%m.%d-%T`: ##############  Start $0 ##############" >> ${log}

echo "`date +%Y.%m.%d-%T`: Проверяю state file:" >> ${log}
if [ -f "${state_file}" ]
then
	echo "`date +%Y.%m.%d-%T`: Статус-файл: ${state_file} существует, значит скрипт $0 или уже выполняется или предыдущий запуск завершился с ошибкой - выход" >> ${log}
	exit 1
else
	echo "`date +%Y.%m.%d-%T`: Статус-файл: ${state_file} НЕ существует, значит НЕТ выполняемой копии скрипта $0. Создаю файл статуса" >> ${log}
	touch "${state_file}"
fi


cat /dev/null > "${wget_log}"


# Скачиваем самый свежий дамп:
url_dump="http://export.osm.prim.drsk.ru/drsk_osm_full_dump_latest.osm.gz"
echo "`date +%Y.%m.%d-%T`: Start wget corp OSM dump: ${url_dump} (wget log: $wget_log)" >> ${log}

#mv "$dump" "${dump}_old"
wget --no-proxy "${url_dump}" -O "${dump}.gz" -a "${wget_log}"
if [ 0 != $? ]
then
	echo "`date +%Y.%m.%d-%T`: Error wget corp OSM dump!" >> ${log}
	rm "${state_file}"
	exit 1
fi
echo "`date +%Y.%m.%d-%T`: Success wget corp OSM dump" >> ${log}
echo "`date +%Y.%m.%d-%T`: 10 last lines from wget log:" >> ${log}
tail -n 10 "${wget_log}" >> "${log}"

echo "`date +%Y.%m.%d-%T`: Распаковываем дамп:" >> ${log}
gunzip "${dump}.gz" 
echo "`date +%Y.%m.%d-%T`: Переинициализируем базу" >> ${log}

# Удаляем базу:
sql="DROP DATABASE ${db_name}"
postgres_run "${db_name}" "${sql}"
ret_status=$?
if [ 0 != ${ret_status} ]
then
	exit 1
fi
echo "`date +%Y.%m.%d-%T`: Удаляем базу, status=$ret_status" >> ${log}

# Создаём базу:
sql="CREATE DATABASE ${db_name}"
postgres_run "${db_name}" "${sql}"
ret_status=$?
if [ 0 != ${ret_status} ]
then
	exit 1
fi
echo "`date +%Y.%m.%d-%T`: Создаём базу, status=$status" >> ${log}

# Включаем для неё расширение postgis:
sql="CREATE LANGUAGE plpgsql"
postgres_run "${db_name}" "${sql}"
ret_status=$?
if [ 0 != ${ret_status} ]
then
	exit 1
fi
echo "`date +%Y.%m.%d-%T`: Включаем postgis, status=$ret_status" >> ${log}

sql="CREATE EXTENSION hstore"
postgres_run "${db_name}" "${sql}"
ret_status=$?
if [ 0 != ${ret_status} ]
then
	exit 1
fi
echo "`date +%Y.%m.%d-%T`: Включаем hstore, status=$ret_status" >> ${log}

sql="CREATE EXTENSION dict_int"
postgres_run "${db_name}" "${sql}"
ret_status=$?
if [ 0 != ${ret_status} ]
then
	exit 1
fi
echo "`date +%Y.%m.%d-%T`: Включаем dict_int, status=$ret_status" >> ${log}


# Инициируем базу:
echo "`date +%Y.%m.%d-%T`: Инициируем базу:" >> ${log}
shemas="/usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql \
/usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql"

#shemas="/usr/share/postgresql-9.0/contrib/hstore.sql \
#/usr/share/postgresql-9.0/contrib/_int.sql \
#/usr/share/postgresql-9.0/contrib/postgis-1.5/postgis.sql \
#/usr/share/postgresql-9.0/contrib/postgis-1.5/spatial_ref_sys.sql \
#/opt/osm/osmosis-0.39/script/pgsnapshot_schema_0.6.sql \
#/opt/osm/osmosis-0.39/script/pgsnapshot_schema_0.6_action.sql \
#/opt/osm/osmosis-0.39/script/pgsnapshot_schema_0.6_bbox.sql \
#/opt/osm/osmosis-0.39/script/pgsnapshot_schema_0.6_linestring.sql
#"

for sql in ${shemas}
do
	postgres_run_file "${db_name}" "${sql}"
	ret_status=$?
	if [ ! 0 -eq ${ret_status} ]
	then
		echo "`date +%Y.%m.%d-%T`: ERROR ошибка загрузки sql-схемы: ${sql} в базу ${db_name} с помощью psql, status=${ret_status}" >> ${log}
		rm ${state_file}
		exit 1
	else 
		echo "`date +%Y.%m.%d-%T`: загрузка ${sql}, status=$ret_status" >> ${log}
	fi
done


sql="ALTER TABLE geometry_columns OWNER TO ${db_user}; ALTER TABLE spatial_ref_sys OWNER TO ${db_user};"
postgres_run "${db_name}" "${sql}"
ret_status=$?
if [ 0 != ${ret_status} ]
then
	exit 1
fi
echo "`date +%Y.%m.%d-%T`: Даём права на базу ${db_name} пользователю ${db_user}, status=$ret_status" >> ${log}


# Загрузка данных в gis-базу:

echo "`date +%Y.%m.%d-%T`: Загрузка данных в gis-базу ${db_name} с помощью osm2pgsql" >> ${log}
echo "osm2pgsql --style /usr/share/osm2pgsql/default.style --create --database ${db_name} --username ${db_user} --prefix planet_osm --slim --cache 2048 --hstore $dump"
osm2pgsql --style /opt/osm/drsk_osm_map_styles/osm2pgsql_styles/drsk.style --create --database ${db_name} --username ${db_user} -H ${db_host} --prefix planet_osm --slim --cache 2048 --hstore "$dump" &>> ${osm2pgsql_log}

if [ ! 0 -eq $? ]
then
	echo "`date +%Y.%m.%d-%T`: ERROR ошибка загрузки дампа в базу ${db_name} с помощью osm2pgsql. Выход." >> ${log}
	rm ${state_file}
	exit 1
else
	echo "`date +%Y.%m.%d-%T`: SUCCESS  успешно загрузил дамп corp OSM в базу ${db_name} с помощью osm2pgsql" >> ${log}
fi

echo "`date +%Y.%m.%d-%T`: удаляем статус-файл: ${state_file}" >> ${log}
rm "${state_file}"
echo "`date +%Y.%m.%d-%T`: ==============  Успешное завершение работы скрипта $0  ====================" >> ${log}

rm ${dump}
exit 0
